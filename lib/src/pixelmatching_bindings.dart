// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// FFI bindings for OpenCV
class PixelMatchingBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  PixelMatchingBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  PixelMatchingBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  bool initialize() {
    return _initialize();
  }

  late final _initializePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('initialize');
  late final _initialize = _initializePtr.asFunction<bool Function()>();

  int getStatusCode() {
    return _getStatusCode();
  }

  late final _getStatusCodePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getStatusCode');
  late final _getStatusCode = _getStatusCodePtr.asFunction<int Function()>();

  bool setTargetImage(
    ffi.Pointer<ffi.UnsignedChar> image,
    int width,
    int height,
  ) {
    return _setTargetImage(
      image,
      width,
      height,
    );
  }

  late final _setTargetImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Int)>>('setTargetImage');
  late final _setTargetImage = _setTargetImagePtr
      .asFunction<bool Function(ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  bool setQueryImage(
    ffi.Pointer<ffi.UnsignedChar> image,
    int width,
    int height,
  ) {
    return _setQueryImage(
      image,
      width,
      height,
    );
  }

  late final _setQueryImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Int)>>('setQueryImage');
  late final _setQueryImage = _setQueryImagePtr
      .asFunction<bool Function(ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  double getQueryConfidenceRate() {
    return _getQueryConfidenceRate();
  }

  late final _getQueryConfidenceRatePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>(
          'getQueryConfidenceRate');
  late final _getQueryConfidenceRate =
      _getQueryConfidenceRatePtr.asFunction<double Function()>();

  void dispose() {
    return _dispose();
  }

  late final _disposePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('dispose');
  late final _dispose = _disposePtr.asFunction<void Function()>();
}

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;
